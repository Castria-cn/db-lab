#include "extmem.h"

#define BUFSIZE (520)
#define BLKSIZE (64)
#define TUPLESIZE (8)
typedef void* (*generator)();
typedef int (*bool_fun)(int, int);

static int free_disk; // first unused disk addr

typedef struct {
    int start_addr; // start addr on disk
    int tuple_size; // byte per tuple
    int block_num; // block number on disk
} relation_info;

static Buffer buffer;
static relation_info relation;

/* Generator for relation R. */
void* R_generator();

/* Generator for relation S. */
void* S_generator();

/**
 * Create a relation with n tuples,
 * each tuple is generated by gen(it is a function that returns a void* pointer, with tuple_size bytes data in it).
 * The relation will be written to disk from the first free position continuously.
 * Returns the relation information.
*/
relation_info init_relation(int n, int tuple_size, generator gen);

/**
 * Select the given tuple, which satisfies (tuple.attr fun[1] target) in relation R,
 * returns the new relation info. The new relation will be written to the first free position.
 * attr=0, 1, ...(let R = (attr0, attr1, ...))
 * [1] fun can be [greater, less, equals, greater_equals, less_equals].
*/
relation_info select(relation_info R, int attr, bool_fun fun, int target);

/**
 * Project the relation R on attribute attr.
 * Returns the new relation info. The new relation will be written to the first free position.
 * attr=0, 1, ...(let R = (attr0, attr1, ...))
*/
relation_info project(relation_info R, int attr);

/**
 * Join relation R and S on attribute attr_r and attr_s, respectively.
 * Returns the new relation info. The new relation will be written to the first free position.
 * attr=0, 1, ...(let R = (attr0, attr1, ...))
*/
relation_info nested_loop_join(relation_info R, relation_info S, int attr_r, int attr_s);

relation_info hash_join(relation_info R, relation_info S, int attr_r, int attr_s);

relation_info sort_merge_join(relation_info R, relation_info S, int attr_r, int attr_s);

/**
 * Print relation R.
*/
void show_relation(relation_info R, char *msg);

int greater(int a, int b);

int less(int a, int b);

int equals(int a, int b);

int greater_equals(int a, int b);

int less_equals(int a, int b);